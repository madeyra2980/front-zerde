import React, { useState } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import './ApiTest.css';

const ApiTest = () => {
  const { isAuthenticated, user, signin, signup, logout } = useAuth();
  const [testResults, setTestResults] = useState([]);
  const [loading, setLoading] = useState(false);

  const addResult = (message, type = 'info') => {
    setTestResults(prev => [...prev, { 
      id: Date.now(), 
      message, 
      type, 
      timestamp: new Date().toLocaleTimeString() 
    }]);
  };

  const testSignup = async () => {
    setLoading(true);
    addResult('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...', 'info');
    
    try {
      const result = await signup({
        name: 'Test User',
        email: 'testuser@example.com',
        password: 'password123'
      });
      
      if (result.success) {
        addResult('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', 'success');
      } else {
        addResult(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${result.error}`, 'error');
      }
    } catch (error) {
      addResult(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`, 'error');
    } finally {
      setLoading(false);
    }
  };

  const testSignin = async () => {
    setLoading(true);
    addResult('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞...', 'info');
    
    try {
      const result = await signin({
        email: 'admin@gmail.com',
        password: 'admin'
      });
      
      if (result.success) {
        addResult('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!', 'success');
        addResult(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${result.data.user?.email || 'N/A'}`, 'info');
      } else {
        addResult(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${result.error}`, 'error');
      }
    } catch (error) {
      addResult(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ: ${error.message}`, 'error');
    } finally {
      setLoading(false);
    }
  };

  const testApiCall = async () => {
    setLoading(true);
    addResult('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ API...', 'info');
    
    try {
      const response = await fetch('http://localhost:8080/api/v1/admin/lessons', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        addResult('‚úÖ API –≤—ã–∑–æ–≤ —É—Å–ø–µ—à–µ–Ω!', 'success');
        addResult(`üìä –ü–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–∫–æ–≤: ${data.length}`, 'info');
      } else if (response.status === 401) {
        addResult('üîÑ –ü–æ–ª—É—á–µ–Ω–∞ 401 –æ—à–∏–±–∫–∞ - —Ä–µ—Ñ—Ä–µ—à —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', 'warning');
      } else {
        addResult(`‚ùå API –æ—à–∏–±–∫–∞: ${response.status}`, 'error');
      }
    } catch (error) {
      addResult(`‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`, 'error');
    } finally {
      setLoading(false);
    }
  };

  const clearResults = () => {
    setTestResults([]);
  };

  const getTokenInfo = () => {
    const token = localStorage.getItem('accessToken');
    const refreshToken = localStorage.getItem('refreshToken');
    
    if (!token) return '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞';
    
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      const expDate = new Date(payload.exp * 1000);
      const isExpired = payload.exp < Date.now() / 1000;
      
      return {
        hasToken: !!token,
        hasRefreshToken: !!refreshToken,
        expiresAt: expDate.toLocaleString(),
        isExpired,
        userId: payload.sub || payload.userId || 'N/A'
      };
    } catch (error) {
      return '–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞';
    }
  };

  const tokenInfo = getTokenInfo();

  return (
    <div className="api-test">
      <h2>–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Backend</h2>
      
      <div className="api-test__info">
        <h3>–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h3>
        <p><strong>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:</strong> {isAuthenticated ? '–î–∞' : '–ù–µ—Ç'}</p>
        <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {user?.email || 'N/A'}</p>
        
        <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö</h3>
        {typeof tokenInfo === 'object' ? (
          <>
            <p><strong>Access Token:</strong> {tokenInfo.hasToken ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}</p>
            <p><strong>Refresh Token:</strong> {tokenInfo.hasRefreshToken ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}</p>
            <p><strong>–ò—Å—Ç–µ–∫–∞–µ—Ç:</strong> {tokenInfo.expiresAt}</p>
            <p><strong>–ò—Å—Ç–µ–∫:</strong> {tokenInfo.isExpired ? '–î–∞' : '–ù–µ—Ç'}</p>
            <p><strong>User ID:</strong> {tokenInfo.userId}</p>
          </>
        ) : (
          <p>{tokenInfo}</p>
        )}
      </div>

      <div className="api-test__controls">
        <button 
          onClick={testSignup} 
          disabled={loading}
          className="api-test__button api-test__button--primary"
        >
          {loading ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–¢–µ—Å—Ç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'}
        </button>
        
        <button 
          onClick={testSignin} 
          disabled={loading}
          className="api-test__button api-test__button--secondary"
        >
          {loading ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–¢–µ—Å—Ç –í—Ö–æ–¥–∞ (Admin)'}
        </button>
        
        <button 
          onClick={testApiCall} 
          disabled={loading || !isAuthenticated}
          className="api-test__button api-test__button--success"
        >
          {loading ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–¢–µ—Å—Ç API (Admin)'}
        </button>
        
        <button 
          onClick={logout} 
          className="api-test__button api-test__button--danger"
        >
          –í—ã–π—Ç–∏
        </button>
        
        <button 
          onClick={clearResults} 
          className="api-test__button api-test__button--warning"
        >
          –û—á–∏—Å—Ç–∏—Ç—å –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        </button>
      </div>

      <div className="api-test__results">
        <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h3>
        {testResults.length === 0 ? (
          <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
        ) : (
          <div className="api-test__results-list">
            {testResults.map(result => (
              <div key={result.id} className={`api-test__result api-test__result--${result.type}`}>
                <span className="api-test__result-time">[{result.timestamp}]</span>
                <span className="api-test__result-message">{result.message}</span>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default ApiTest;
