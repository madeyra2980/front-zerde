import React, { useState, useEffect } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { Table, Button, Modal, Input, Badge, Toast, ToastContainer } from '../ui';
import apiService from '../../service/api';
import './Settings.css';
import Navigation from '../Navigation';

const Settings = () => {
  const { isAuthenticated, user } = useAuth();
  const [activeTab, setActiveTab] = useState('subjects');
  const [loading, setLoading] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [modalType, setModalType] = useState('');
  const [formData, setFormData] = useState({});
  
  // –î–∞–Ω–Ω—ã–µ
  const [subjects, setSubjects] = useState([]);
  const [rooms, setRooms] = useState([]);
  const [groups, setGroups] = useState([]);
  
  // Toast
  const [toasts, setToasts] = useState([]);

  const addToast = (message, type = 'success') => {
    const id = Date.now();
    setToasts(prev => [...prev, { id, message, type }]);
    setTimeout(() => {
      setToasts(prev => prev.filter(toast => toast.id !== id));
    }, 3000);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const fetchSubjects = async () => {
    try {
      setLoading(true);
      const data = await apiService.getSubjects();
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã:', data);
      setSubjects(data || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', error);
      addToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤', 'error');
    } finally {
      setLoading(false);
    }
  };

  const fetchRooms = async () => {
    try {
      setLoading(true);
      const data = await apiService.getRooms();
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –∞—É–¥–∏—Ç–æ—Ä–∏–∏:', data);
      setRooms(data || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–π:', error);
      addToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–π', 'error');
    } finally {
      setLoading(false);
    }
  };

  const fetchGroups = async () => {
    try {
      setLoading(true);
      const data = await apiService.getGroups();
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –≥—Ä—É–ø–ø—ã:', data);
      setGroups(data || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:', error);
      addToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø', 'error');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (isAuthenticated) {
      fetchSubjects();
    }
  }, [isAuthenticated]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const handleOpenModal = (type) => {
    setModalType(type);
    setFormData({});
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setShowModal(false);
    setModalType('');
    setFormData({});
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
  const handleCreate = async () => {
    try {
      setLoading(true);
      
      switch (modalType) {
        case 'subjects':
          console.log('–°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç:', formData.subjectName);
          await apiService.createSubject(formData.subjectName);
          await fetchSubjects();
          addToast('–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
          break;
        case 'rooms':
          console.log('–°–æ–∑–¥–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é:', formData.roomName);
          await apiService.createRoom(formData.roomName);
          await fetchRooms();
          addToast('–ê—É–¥–∏—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
          break;
        case 'groups':
          console.log('–°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É:', formData.groupName);
          await apiService.createGroup(formData.groupName);
          await fetchGroups();
          addToast('–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
          break;
        default:
          break;
      }
      
      handleCloseModal();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error);
      addToast('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏', 'error');
    } finally {
      setLoading(false);
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
  const handleTabChange = (tab) => {
    setActiveTab(tab);
    switch (tab) {
      case 'subjects':
        fetchSubjects();
        break;
      case 'rooms':
        fetchRooms();
        break;
      case 'groups':
        fetchGroups();
        break;
      default:
        break;
    }
  };

  // –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü
  const subjectColumns = [
    {
      key: 'subject_id',
      title: 'ID',
      width: '80px',
      render: (value, subject) => subject?.subject_id || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    },
    {
      key: 'subject_name',
      title: '–ù–∞–∑–≤–∞–Ω–∏–µ',
      render: (value, subject) => subject?.subject_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    },
    {
      key: 'actions',
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      render: (value, subject) => (
        <div className="settings-actions">
          <Button size="sm" variant="outline" onClick={() => console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç', subject)}>
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
          </Button>
          <Button size="sm" variant="danger" onClick={() => console.log('–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç', subject)}>
            –£–¥–∞–ª–∏—Ç—å
          </Button>
        </div>
      )
    }
  ];

  const roomColumns = [
    {
      key: 'room_id',
      title: 'ID',
      width: '80px',
      render: (value, room) => room?.room_id || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    },
    {
      key: 'room_name',
      title: '–ù–∞–∑–≤–∞–Ω–∏–µ',
      render: (value, room) => room?.room_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    },
    {
      key: 'actions',
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      render: (value, room) => (
        <div className="settings-actions">
          <Button size="sm" variant="outline" onClick={() => console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é', room)}>
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
          </Button>
          <Button size="sm" variant="danger" onClick={() => console.log('–£–¥–∞–ª–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é', room)}>
            –£–¥–∞–ª–∏—Ç—å
          </Button>
        </div>
      )
    }
  ];

  const groupColumns = [
    {
      key: 'group_id',
      title: 'ID',
      width: '80px',
      render: (value, group) => group?.group_id || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    },
    {
      key: 'group_name',
      title: '–ù–∞–∑–≤–∞–Ω–∏–µ',
      render: (value, group) => group?.group_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    },
    {
      key: 'actions',
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      render: (value, group) => (
        <div className="settings-actions">
          <Button size="sm" variant="outline" onClick={() => console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É', group)}>
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
          </Button>
          <Button size="sm" variant="danger" onClick={() => console.log('–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É', group)}>
            –£–¥–∞–ª–∏—Ç—å
          </Button>
        </div>
      )
    }
  ];

  if (!isAuthenticated) {
    return (
      <div className="settings-container">
        <div className="settings-unauthorized">
          <h2>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
          <p>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</p>
        </div>
      </div>
    );
  }

  return (
    <>
    <Navigation />
    <div className="settings-container">

      <div className="settings-header">
        <div className="settings-title">
          <div className="settings-icon">‚öôÔ∏è</div>
          <h1>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h1>
        </div>
        <p className="settings-description">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏, –∞—É–¥–∏—Ç–æ—Ä–∏—è–º–∏ –∏ –≥—Ä—É–ø–ø–∞–º–∏
        </p>
      </div>

      <div className="settings-content">
        <div className="settings-tabs">
          <button
            className={`settings-tab ${activeTab === 'subjects' ? 'active' : ''}`}
            onClick={() => handleTabChange('subjects')}
          >
            üìö –ü—Ä–µ–¥–º–µ—Ç—ã
          </button>
          <button
            className={`settings-tab ${activeTab === 'rooms' ? 'active' : ''}`}
            onClick={() => handleTabChange('rooms')}
          >
            üè´ –ê—É–¥–∏—Ç–æ—Ä–∏–∏
          </button>
          <button
            className={`settings-tab ${activeTab === 'groups' ? 'active' : ''}`}
            onClick={() => handleTabChange('groups')}
          >
            üë• –ì—Ä—É–ø–ø—ã
          </button>
        </div>

        <div className="settings-tab-content">
          <div className="settings-toolbar">
            <h2>
              {activeTab === 'subjects' && '–ü—Ä–µ–¥–º–µ—Ç—ã'}
              {activeTab === 'rooms' && '–ê—É–¥–∏—Ç–æ—Ä–∏–∏'}
              {activeTab === 'groups' && '–ì—Ä—É–ø–ø—ã'}
            </h2>
            <Button
              variant="primary"
              onClick={() => handleOpenModal(activeTab)}
            >
              + –î–æ–±–∞–≤–∏—Ç—å
            </Button>
          </div>

          <div className="settings-table">
            {activeTab === 'subjects' && (
              <Table
                data={subjects}
                columns={subjectColumns}
                loading={loading}
                emptyText="–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
              />
            )}
            {activeTab === 'rooms' && (
              <Table
                data={rooms}
                columns={roomColumns}
                loading={loading}
                emptyText="–ù–µ—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–π"
              />
            )}
            {activeTab === 'groups' && (
              <Table
                data={groups}
                columns={groupColumns}
                loading={loading}
                emptyText="–ù–µ—Ç –≥—Ä—É–ø–ø"
              />
            )}
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è */}
      <Modal
        isOpen={showModal}
        onClose={handleCloseModal}
        title={`–î–æ–±–∞–≤–∏—Ç—å ${modalType === 'subjects' ? '–ø—Ä–µ–¥–º–µ—Ç' : modalType === 'rooms' ? '–∞—É–¥–∏—Ç–æ—Ä–∏—é' : '–≥—Ä—É–ø–ø—É'}`}
        size="md"
      >
        <div className="settings-modal-content">
          <div className="settings-modal-form">
            <div className="settings-modal-field">
              <label>
                {modalType === 'subjects' ? '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞' : modalType === 'rooms' ? '–ù–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏' : '–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã'}
                <span style={{color: 'var(--error)', marginLeft: '4px'}}>*</span>
              </label>
              <Input
                name={modalType === 'subjects' ? 'subjectName' : modalType === 'rooms' ? 'roomName' : 'groupName'}
                value={formData[modalType === 'subjects' ? 'subjectName' : modalType === 'rooms' ? 'roomName' : 'groupName'] || ''}
                onChange={handleInputChange}
                placeholder={`–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ${modalType === 'subjects' ? '–ø—Ä–µ–¥–º–µ—Ç–∞' : modalType === 'rooms' ? '–∞—É–¥–∏—Ç–æ—Ä–∏–∏' : '–≥—Ä—É–ø–ø—ã'}`}
                required
                size="md"
              />
            </div>
          </div>
          
          <div className="settings-modal-actions">
            <Button variant="outline" onClick={handleCloseModal}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button 
              variant="primary" 
              onClick={handleCreate}
              disabled={loading || !formData[modalType === 'subjects' ? 'subjectName' : modalType === 'rooms' ? 'roomName' : 'groupName']}
            >
              {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å'}
            </Button>
          </div>
        </div>
      </Modal>

      <ToastContainer>
        {toasts.map(toast => (
          <Toast
            key={toast.id}
            type={toast.type}
            message={toast.message}
            onClose={() => setToasts(prev => prev.filter(t => t.id !== toast.id))}
          />
        ))}
      </ToastContainer>
    </div>
    </>
  );
};

export default Settings;
